<script>
    var count = 0;

    // JQuery Variables for the modal and its buttons
    const $Delete_category_modal_mask = $("#delete_category_modal_mask");
    const $Delete_category_modal = $("#delete_category_modal");
    const $DeleteCategoryModal_Btn_Transfer = $("#delete_category_modal a").first();
    const $DeleteCategoryModal_Btn_Delete = $("#delete_category_modal a").last();
    const $DeleteCategoryModal_Btn_Hide = $("#delete-category-hide-button");

    const $Delete_category_modal_transfer = $("#delete_category_modal_dropdown_list");
    const $Delete_category_newCategorySelected = $("#selected-category-to-be-transferred");
    const $Delete_category_modal_transfer_Msg = $("#delete_category_modal_dropdown_list p");
    const $Delete_category_modal_transfer_ul  = $("#delete_category_modal_dropdown_list ul");
    const $Delete_category_modal_transfer_ul_a  = $("#delete_category_modal_dropdown_list ul a");
    const $Delete_category_modal_dropdown_list_Btn_Transfer = $("#delete_category_modal_confirm_Transfer");
    const $Delete_category_modal_dropdown_list_Btn_Hide = $("#delete_category_modal_dropdown_list a").last();

    const $Delete_Category_Final_Comfirmation_Modal = $("#delete_category_final_confirmation");
    const $Delete_Category_Final_Comfirmation_Modal_Message = $("#delete_category_final_confirmation p");
    const $Delete_Category_Final_Yes = $("#delete_category_final_confirmation div a").first();
    const $Delete_Category_Final_No = $("#delete_category_final_confirmation div a").last();
    
    // JQuery Delete button 
    $DeleteCategoryModal_Btn_Delete.on("click",function(){
        //Returns a promise after successful deletion, to destroy the element on the UI
        DeleteCategoryModal.ToggleDisplayModal().then( (res,rej) => {
            setTimeout( function(){
                DeleteCategoryModal.Delete_Expense(); 
            },1000);
        }); 
    })

    //JQuery Hide Delete Category Modal
     $DeleteCategoryModal_Btn_Hide.on("click",function(){
        DeleteCategoryModal.ToggleDisplayModal();
    })

    // JQuery Transfer button 
    $DeleteCategoryModal_Btn_Transfer.on("click",function(){
        DeleteCategoryModal.ToggleTransferModal();
    })

    //JQuery Hide: Delete-Category-Modal-Transfer-Modal
    $Delete_category_modal_dropdown_list_Btn_Hide.on("click", function(){
        $Delete_category_modal_transfer_Msg.text(""); 
        DeleteCategoryModal.ToggleTransferModal();
        DeleteCategoryModal.ResetSelectedCategory();
    });

    //JQuery Attempt Transfer: Attempts to Transfer the selected category
    $Delete_category_modal_dropdown_list_Btn_Transfer.on("click",function(){
        DeleteCategoryModal.CheckIfValidTransfer();
    });
    
    @* JQuery List of <a>Category</a>, each time one is pressed 
    it will update the <input /> field and display the newly 
    selected category *@
    $Delete_category_modal_transfer_ul_a.on("click",function(){
        //gets current id, embedded into the element, $(this) references the <a>
         DeleteCategoryModal.CategoryId_New = $(this).attr("id").split(".")[1];
         DeleteCategoryModal.CategoryName_New = $(this)[0].text;
         DeleteCategoryModal.DisplayMessage("Selected Category: " + DeleteCategoryModal.CategoryName_New, "#6f42c1");
    });

    @* Final Confirmation Modal, Buttons *@
    $Delete_Category_Final_Yes.on("click", function(){
        DeleteCategoryModal.TransferCategory();
    })
    
     $Delete_Category_Final_No.on("click", function(){
        DeleteCategoryModal.ToggleConfirmModal();
    })

// Object Literal, containing methods and properties for the Category_Delete_Modal
    var DeleteCategoryModal = {
        //To access this variable via other functions, you need to use this.CategoryId_Old
        CategoryId_Old: "",
        CategoryName_Old: "",
        CategoryId_New: "",
        CategoryName_New: "",
        //Is called first to adjust the size of the modal relative to the screen
        CreateModal_FitToScreen: function(){
            //Gets the height and width of the screen
            const $ScreenSize = getCurrentScreenSize();
            height = $ScreenSize.height;
            width = $ScreenSize.width;
            
            $Delete_category_modal_mask.css({
                position: "absolute",
                zIndex: 2,
                backgroundColor: "#6f42c1",
                opacity:"0.8",
                top: "0px",
                left: "0px",
                height: height,
                width: width,
            })

            let modalWidth=400;
            if(+width < 600){
                modalWidth=300;
            }
            if(+width > 922){
                modalWidth=500;
            }

        //Create style for the main delete category modal
            const modalPosition = ((+$ScreenSize.width - +modalWidth) / 2);

            const style = {
                position: "fixed",
                backgroundColor: "#6f42c1",
                width: modalWidth+"px",
                left: modalPosition+"px",
            };

            $Delete_category_modal.css(style)

            //Now, alter for the sub-modal, which will alert if the expense is tied to an existing catgegory
            style.fontSize = "18px";
            $Delete_category_modal_transfer.css(style);
            //Create the height for the list in the sub-modal
            const newh = $Delete_category_modal.height() / 2;
            $Delete_category_modal_transfer_ul .css({height: newh});

            //Center the third, confirm modal, modal
            this.CentreModal($Delete_Category_Final_Comfirmation_Modal);
            
        },
        //This is the first method to be called, the init
        check_If_Expenses_Exists: function(category_Id,category_name){
            this.CategoryId_Old = category_Id;
            this.CategoryName_Old = category_name;
            const URL = '/Expenses/DoesExpenseExist/'+category_Id;
            const Type = "Get";
            const ContentType = 'application/x-www-form-urlencoded';
            const Data = null;
            const SuccessFn = function (successFlag) {
                                            if(successFlag)
                                                this.ToggleDisplayModal();
                                            else
                                                this.Delete_Expense();
                                }
            const ErrorFn = function (error) {fireNotif("There was a problem with a Category",'error', 5000);}
            this.Ajax_DB_Call(URL,ContentType,Type,Data,SuccessFn.bind(this),ErrorFn)
        },
        Delete_Expense: function(){
            const URL = '/Category/Delete/'+this.CategoryId_Old;
            const Type = "Post";
            const ContentType = 'application/x-www-form-urlencoded';
            const Data = null;
            const SuccessFn = (result) => { if (result){this.RemoveElementFromUI(this.CategoryId_Old)} }
            const ErrorFn = function (error) {fireNotif("There was a problem deleting a category",'error', 5000);}
            this.Ajax_DB_Call(URL,ContentType,Type,Data,SuccessFn.bind(this),ErrorFn)
        },
        //Called by other methods, received parameters, executes ajax call
        Ajax_DB_Call: function(URL, ContentType, Type, Data, SuccessFn,ErrorFn){
            const info = {
                url: URL,
                contentType: ContentType,
                type: Type,
                success: SuccessFn,
                error: ErrorFn
            };

            if(Data != null)
                info.data = Data;

            $.ajax(info)
        },
        RemoveElementFromUI: function(category_Id){
            const RowName = "#displayName"+this.CategoryId_Old;
            const $RowToDelete = $(RowName);
            $RowToDelete.effect("explode",function(){$(this).remove();});
        },
        //Primary Modal
        ToggleDisplayModal: function(){
            $Delete_category_modal.toggle("fade");
            $Delete_category_modal_mask.toggle("fade");
            return $.Deferred((x) => {x.resolve()}).promise();
        },  
        //Modal displaying list of categories
        ToggleTransferModal: function(){
            $Delete_category_modal_transfer.toggle("fade");
        },
        //final modal, asking user to confirm after selecting new category to transfer 
        ToggleConfirmModal: function(){
            $Delete_Category_Final_Comfirmation_Modal.toggle();
            $Delete_category_modal.toggle();
            $Delete_category_modal_transfer.toggle();
        },
        TransferCategory: function(){
            const URL = '/Expenses/ChangeExpenseCategory/';
            const Type = "Post";
            const Data = {CategoryId_Old: this.CategoryId_Old,
                          CategoryId_New: this.CategoryId_New
                        };
            const ContentType = 'application/x-www-form-urlencoded';
            const SuccessFn = function (successFlag) {
                                            if(successFlag)
                                                {
                                                    //show toast
                                                    fireNotif("Successfully Transferred Category","success",5000);
                                                    //delete expense
                                                    this.Delete_Expense();
                                                    //Reset the category
                                                    this.ResetSelectedCategory();
                                                    //hide all modals
                                                    $Delete_Category_Final_Comfirmation_Modal.toggle();
                                                    $Delete_category_modal_mask.toggle();
                                                }
                                            else{
                                                //msg, something went wrong
                                                //show toast
                                                    fireNotif("Error when trying to Transfer Category","error",5000);
                                            }
                                                
                                }
            const ErrorFn = function (error) {fireNotif("There was a problem with switching the Category of your expense",'error', 5000);}
            this.Ajax_DB_Call(URL,ContentType,Type,Data,SuccessFn.bind(this),ErrorFn)
        },
        //Shows a msg for Modal displaying list of categories
        DisplayMessage: function(msg,color="black"){
            $Delete_category_modal_transfer_Msg.text(msg);
            $Delete_category_modal_transfer_Msg.css("backgroundColor", color);
        },
        ResetSelectedCategory: function(){
            this.CategoryId_New = "";
            this.CategoryName_New = "";
        },
        //Checks if the user is not trying to transfer to the existing CategoryId, or has not selected anything
        CheckIfValidTransfer: function(){
            if(this.CategoryId_Old == this.CategoryId_New){  
                this.DisplayMessage("Cannot Select Same Category","#e44c55");
            }   
            else if(this.CategoryId_New == ""){
                this.DisplayMessage("Nothing Selected","#e44c55");
            } else{
                //if everything is okay, show the confirm modal
                $Delete_Category_Final_Comfirmation_Modal.toggle();
                //create message
                const msg = "Actions:  Delete " + this.CategoryName_Old + " and Replace with: " + this.CategoryName_New;
                //insert message
                $Delete_Category_Final_Comfirmation_Modal_Message.html(msg);
                //hide other modals
                $Delete_category_modal.toggle();
                $Delete_category_modal_transfer.toggle();
            }
        },
        //takes a JQuery object, should be a modal, it is an element, and this function will position the element into the center of the screen
        CentreModal: function($modal){
            //Get Screen size
            const $ScreenSize = getCurrentScreenSize();

            //Get Element Width and height
            @* const width = $modal.width();
            const height = $modal.height(); *@

 //Get Element Width and height
            const width = +$ScreenSize.width * 0.3;
            const height = +$ScreenSize.height * 0.3;;

            //Calculate the left and top position, based on the height and width of the element
            const left = (+$ScreenSize.width - +width) / 2;
            const top = (+$ScreenSize.height - +height) / 2;

            //Set the left and top positions
            $modal.css({
                width: width+"px",
                height: height+"px",
                left: left+"px",
                top: top+"px",
            });
        },
        }
</script>

<script>
    //Initialisation of the Modal size, fit modal to screen size
    DeleteCategoryModal.CreateModal_FitToScreen();
</script>

<script>
    //Takes 3 parameters, the name is just the Id, and the flag is whether we want to reveal or hide 
    function edit_Category_Name(name, flag) {

        let displayName = `displayName${name}`;
        let editName = `editName${name}`;
        let editButton = `editButton${name}`;


        document.getElementById(displayName).hidden = !flag;
        document.getElementById(editName).hidden = flag;
        document.getElementById(editButton).disabled = !flag;
    }

    @* function editHandler(name) {
        console.log("edit done");
        editName();
    } *@
</script>