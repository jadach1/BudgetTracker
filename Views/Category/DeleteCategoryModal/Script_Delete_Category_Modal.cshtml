<script>
    var count = 0;

    // JQuery Variables for the modal and its buttons
    const $Delete_category_modal_mask = $("#delete_category_modal_mask");
    const $Delete_category_modal = $("#delete_category_modal");
    const $DeleteCategoryModal_Btn_Transfer = $("#delete_category_modal a").first();
    const $DeleteCategoryModal_Btn_Delete = $("#delete_category_modal a").last();
    const $DeleteCategoryModal_Btn_Hide = $("#delete-category-hide-button");

    const $Delete_category_modal_transfer = $("#delete_category_modal_dropdown_list");
    const $Delete_category_newCategorySelected = $("#selected-category-to-be-transferred");
    const $Delete_category_modal_transfer_Msg = $("#delete_category_modal_dropdown_list p");
    const $Delete_category_modal_transfer_ul  = $("#delete_category_modal_dropdown_list ul");
    const $Delete_category_modal_transfer_ul_a  = $("#delete_category_modal_dropdown_list ul a");
    const $Delete_category_modal_dropdown_list_Btn_Transfer = $("#delete_category_modal_confirm_Transfer");
    const $Delete_category_modal_dropdown_list_Btn_Hide = $("#delete_category_modal_dropdown_list a").last();

    // JQuery Delete button 
    $DeleteCategoryModal_Btn_Delete.on("click",function(){
        //Returns a promise after successful deletion, to destroy the element on the UI
        DeleteCategoryModal.ToggleDisplayModal().then( (res,rej) => {
            setTimeout( function(){
                DeleteCategoryModal.Delete_Expense(); 
            },1000);
        }); 
    })

    //JQuery Hide Delete Category Modal
     $DeleteCategoryModal_Btn_Hide.on("click",function(){
        DeleteCategoryModal.ToggleDisplayModal();
    })

    // JQuery Transfer button 
    $DeleteCategoryModal_Btn_Transfer.on("click",function(){
        DeleteCategoryModal.ToggleTransferModal();
    })

    //JQuery Hide: Delete-Category-Modal-Transfer-Modal
    $Delete_category_modal_dropdown_list_Btn_Hide.on("click", function(){
        $Delete_category_newCategorySelected.val("");
        $Delete_category_modal_transfer_Msg.text(""); 
        DeleteCategoryModal.ToggleTransferModal();
    });


    $Delete_category_modal_dropdown_list_Btn_Transfer.on("click",function(){
        
        console.log($Delete_category_newCategorySelected.val(),"value");
        const str = $Delete_category_newCategorySelected.val();
        if(DeleteCategoryModal.CategoryId == str){  
            DeleteCategoryModal.DisplayError("Cannot Select Same Category");
        }   
        if(str == ""){
            DeleteCategoryModal.DisplayError("Nothing Selected");
        }
    });
    
    $Delete_category_modal_transfer_ul_a.on("click",function(){
        const str = $(this).attr("id").split(".")[1];
        const category = $(this)[0].text;
         $Delete_category_newCategorySelected.val(str);
         $Delete_category_newCategorySelected.show();
         DeleteCategoryModal.DisplayMessage("Selected Category: " + category);
         console.log($Delete_category_modal_transfer_Msg);
    });

// Object Literal, containing methods and properties for the Category_Delete_Modal
    var DeleteCategoryModal = {
        //To access this variable via other functions, you need to use this.CategoryId
        CategoryId: "",
        CreateModal_FitToScreen: function(){
            //Gets the height and width of the screen
            const $ScreenSize = getCurrentScreenSize();
            height = $ScreenSize.height;
            width = $ScreenSize.width;
            
            $Delete_category_modal_mask.css({
                position: "absolute",
                zIndex: 2,
                backgroundColor: "#6f42c1",
                opacity:"0.8",
                top: "0px",
                left: "0px",
                height: height,
                width: width,
            })

            let modalWidth="400px";
            if(+width < 600){
                modalWidth="300px";
            }
            if(+width > 922){
                modalWidth="500px";
            }
            
            const style = {
                position: "fixed",
                backgroundColor: "#6f42c1",
                width: modalWidth,
            };

            $Delete_category_modal.css(style)

            style.height = $Delete_category_modal.height();
            $Delete_category_modal_transfer.css(style);
            const newh = $Delete_category_modal.height() / 2;
            $Delete_category_modal_transfer_ul .css({height: newh});
        },
        //This is the first method to be called, the init
        check_If_Expenses_Exists: function(category_Id){
            this.CategoryId = category_Id;
            const URL = '/Expenses/DoesExpenseExist/'+category_Id;
            const Type = "Get";
            const ContentType = 'application/x-www-form-urlencoded';
            const SuccessFn = function (successFlag) {
                                            if(successFlag)
                                                this.ToggleDisplayModal();
                                            else
                                                this.Delete_Expense();
                                }
            const ErrorFn = function (error) {fireNotif("There was a problem with a Category",'error', 5000);}
            this.Ajax_DB_Call(URL,ContentType,Type,SuccessFn.bind(this),ErrorFn)
        },
        Delete_Expense: function(){
            const URL = '/Category/Delete/'+this.CategoryId;
            const Type = "Post";
            const ContentType = 'application/x-www-form-urlencoded';
            const SuccessFn = (result) => { if (result){this.RemoveElementFromUI(this.CategoryId)} }
            const ErrorFn = function (error) {fireNotif("There was a problem deleting a category",'error', 5000);}
            this.Ajax_DB_Call(URL,ContentType,Type,SuccessFn.bind(this),ErrorFn)
        },
        Ajax_DB_Call: function(URL, ContentType, Type, SuccessFn,ErrorFn){
            $.ajax({
                url: URL,
                contentType: ContentType,
                type: Type,
                success: SuccessFn,
                error: ErrorFn
            })
        },
        RemoveElementFromUI: function(category_Id){
            const RowName = "#displayName"+this.CategoryId;
            const $RowToDelete = $(RowName);
            $RowToDelete.effect("explode",function(){$(this).remove()});
        },
        ToggleDisplayModal: function(){
            $Delete_category_modal.toggle("fade");
            $Delete_category_modal_mask.toggle("fade");
            return $.Deferred((x) => {x.resolve()}).promise();
        },  
        ToggleTransferModal: function(){
            $Delete_category_modal_transfer.toggle("fade");
        },
        TransferCategory: function(){},
        DisplayError: function(msg){
            $Delete_category_modal_transfer_Msg.html(msg);
            $Delete_category_modal_transfer_Msg.css("backgroundColor", "#e44c55");
        },
         DisplayMessage: function(msg){
            $Delete_category_modal_transfer_Msg.text(msg);
            $Delete_category_modal_transfer_Msg.css("backgroundColor", "aqua");
        },}
</script>

<script>
    //Initialisation of the Modal size, fit modal to screen size
    DeleteCategoryModal.CreateModal_FitToScreen();
</script>

<script>
    //Takes 3 parameters, the name is just the Id, and the flag is whether we want to reveal or hide 
    function edit_Category_Name(name, flag) {

        let displayName = `displayName${name}`;
        let editName = `editName${name}`;
        let editButton = `editButton${name}`;


        document.getElementById(displayName).hidden = !flag;
        document.getElementById(editName).hidden = flag;
        document.getElementById(editButton).disabled = !flag;
    }

    @* function editHandler(name) {
        console.log("edit done");
        editName();
    } *@
</script>