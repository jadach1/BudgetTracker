<!-- EVENT LISTENER -->
<script>
    document.getElementById("expense-form-append-list-button").addEventListener("click", () => {
        expenseFormAppendList();
    })

    document.getElementById("expense-form-display-list-button").addEventListener("click", () => {
        ExpenseListDisplay(false); // false = show list hide form
    })
</script>

<!--SETTING VARIABLES FOR FORM--->
<script>
    // the reason this is not grouped within the currency_library.js script page is because that script will load when this page may not, and thereby giving us an error.
    document.getElementById("CreateEditExpenseForm_Currency").value = window.localStorage.getItem('currency') == null ? 'USD' : window.localStorage.getItem('currency');
</script>
<!-- FUNCTIONS FORM SUBMISSION-->
<script>
    // Create an empty list of expenses
    var listOfExpenses = [];
    var listOfExpensesCounter = 0;

    function expenseFormAppendList() {
        // get the expenseForm
        const form = document.getElementById("expenseForm");
        //extract the data
        const formData = Object.fromEntries(new FormData(form));

        //modify the category/type selected, 1.food = 1 food
        const category = formData.type.split(".");

        //create the object
        let expense = {
            id: "listOrder" + listOfExpensesCounter,
            Year: getOurWorkingYear(),
            Month: formData.month,
            Week: formData.week,
            Type: category[0],
            Amount: formData.amount === "" ? "0" : formData.amount,
            Date: formData.date === "" ? getCurrentDate() : formData.date,
            Description: formData.description,
            isIncome: formData.isIncome === "true" ? true : false
        }

        expense.Currency = formData.currency === "" ? "$" : currency_formatter.format(expense.Amount)[0]

        //push to list of expenses
        listOfExpenses.push(expense);

        // update tue ul list
        updateExpenseList(expense, category[1]);

        clearExpenseListForm();
    }

    // Not used for UI, but for form-submission
    function getCurrentDate() {
        const d = new Date();
        const month = d.getMonth() + 1;
        const year = d.getFullYear();
        const day = d.getDate();
        return year + "-" + month + "-" + day;
    }
    // Clear the Form - partially after submission
    function clearExpenseListForm() {
        document.getElementById("expense-description").value = "";
        document.getElementById("expense-amount").value = "";
    }
</script>

<!--STAGING AREA FOR LIST-OF-EXPENSES-->
<!--FUNCTIONS USER INTERFACE MANIPULATION-->
<script>
    var list = document.getElementById("createExpenseStagingArea");

    // Update the expense list UI
    function updateExpenseList(expense, category) {

        //prevent user from constantly deleting the same item.
        let preventMultipleDeletionFlags = false;

        //create list-item 
        const element = document.createElement("p");
        const id = expense.id;
        element.setAttribute("id", id);
        element.className = "ripple-effect"

        //this is what will be presented to the user
        const type = " " + category + "/";
        const amount = " " + currency_formatter.format(expense.Amount);
        const date = humanReadableDate(expense.Date) + "/";

        //adjust what will be presented based on size of user screen
        const size = +document.getElementsByTagName("body")[0].clientWidth;
        
        if (size > 505)
            element.innerHTML = date + type + amount;
        else
            element.innerHTML = type + amount;

        element.style.fontSize = "large";

        //append the list item
        list.getElementsByTagName("ul")[0].appendChild(element);

        //create delete button
        const buttonDelete = document.createElement("a");
        buttonDelete.className = "btn";
        buttonDelete.classList.add("btn-outline-secondary", "btn-lg", "rounded-5", "ripple-effect", "mx-2");

        //delete protocol
        buttonDelete.addEventListener("click", () => {
            if (!preventMultipleDeletionFlags) {
                preventMultipleDeletionFlags = true;
                deleteListItem(id);
            }
        })

        //append delete item
        element.appendChild(buttonDelete);

        const iconDelete = document.createElement("span");
        iconDelete.className = "bi";
        iconDelete.classList.add("bi-fire");
        buttonDelete.appendChild(iconDelete);

        //add jquery ripple effect, must be done after appending 
        $('.ripple-effect').rippleEffect();

        //update the UI-counter
        counterUpdate(true);
    }

    //timeout function needs to be passed in seperately.  This was all done for a fancy ripple effect, ughh.
    function deleteListItem(listid) {
        disableEnableAllButtons(true);

        //colours the list-items background in a pretty red
        document.getElementById(listid).style.backgroundColor = "#e44c55";

        //fire's the list-items "click" event, ripple-effect
        $("#" + listid).trigger("click");

        //after 1/2 second, delete the item
        setTimeout(function () {
            findAndDeleteListItem(listid);
            //update the counter
            counterUpdate(false);
            list.getElementsByTagName("ul")[0].removeChild(document.getElementById(listid));
            disableEnableAllButtons(false);
        }, 500);

    }

    //Finds, deletes, and updates the array of List Items
    function findAndDeleteListItem(listid) {
        const index = listOfExpenses.findIndex(e => listid === e.id)
        if (index != -1) {
            listOfExpenses.splice(index, 1);
        }
    }

    //Updates the UI counter count of list of items.
    function counterUpdate(incrimentCounterFlag) {
        incrimentCounterFlag ? listOfExpensesCounter++ : listOfExpensesCounter--;
        //append to counter
        const textListCounter = document.getElementById("expenseListCount");
        textListCounter.innerHTML = "Items in list: " + listOfExpensesCounter;
    }

    // Flips between displaying the form and list-of-items in the staging area
    function ExpenseListDisplay(flag = true) {
        const createExpenseStagingArea = document.getElementById("createExpenseStagingArea");
        const expenseForm = document.getElementById("expenseForm");
        if (listOfExpensesCounter > 0 || expenseForm.hidden) {
            createExpenseStagingArea.hidden = flag;
            expenseForm.hidden = !flag;
            //enable all buttons
            disableEnableAllButtons(false);
        } else {
            fireNotif('Need to have at least one expense to view list','error', 5000);
        }
    }

    // Clears all the ExpenseList items, as we don't need them anymore, after submit is pushed
    function ClearExpenseListItems() {
        listOfExpenses = [];
        listOfExpensesCounter = 0;
        const textListCounter = document.getElementById("expenseListCount");
        textListCounter.innerHTML = "Items in list: " + listOfExpensesCounter;
        
        // clear actual expense list UI
        //Grab all the p elements
        const tempExpenseList = list.getElementsByTagName("ul")[0].getElementsByTagName("p");
        console.log(tempExpenseList[0]);
      
        //Because every time we delete an element from the collection, this will dynamically change the list size,
        //Every time we remove a child, tempExpenseList.length is shortened.
        //To counter this, we keep the array on [0], and keep a counter for the complete set of elements upon initialization.
        let counter = tempExpenseList.length;
        for(let i = 0; i < counter; i++){
            list.getElementsByTagName("ul")[0].removeChild(tempExpenseList[0])
        }
    }
</script>