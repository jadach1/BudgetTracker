

<script>
    function getAntiForgeryToken(){
        //returns a input field element, which is the token
        let rawtoken = '@Html.AntiForgeryToken()';
        //get the value
        let token = $(rawtoken).val();
        console.log(token);
        return token;
    }
    function ajaxCallToExpenseController_GetExpense(Id){
        $.ajax({
            url: '/Expenses/GetOneExpense/'+Id,
            contentType: 'application/x-www-form-urlencoded',
            type: "Get",
            success: function (data) {
                        // Now that we have gotten our expense, to edit, we will call the function location in: "Scripts_Edit_ExpenseForm" to display our expense
                        toggle_edit_expense_form(data);
                    },

                    // Error handling 
                    error: function (error) {
                        //console.log(`Error ${error}`);
                        fireNotif('There was an Error fetching an Expense', 'error', 5000);
                        console.log(error)
                    }
            });
    }
    function ajaxCallToExpenseController_Delete(Id,$TableRow){
        
        //Pass object with the transaction ID and our anti forgery token
        let Data = {
                    id: Id,
                    __RequestVerificationToken:getAntiForgeryToken() 
                    };

        //Actual ajax call
        $.ajax({
            url: '/Expenses/Delete',
            //contentType: 'application/x-www-form-urlencoded',
            // this will not pass the data
            //   contentType: 'application/json; charset=utf-8',
            type: "Post",
            data: Data,
       
            success: function (data,token) {
                fireNotif('Successfully Removed Expense', 'Success', 5000);
                @* let x = JSON.stringify(data);
                console.log("success", x); *@
                //hide the element from the DOM
                 hideDeleteModal();
                //Reassign the #expense_table_modal element, prevent it from being deleted
                 $('#expense_table_modal_anchor').append($("#expense_table_modal"));
                //delete the desired row
                 $TableRow.effect("explode").delay(300).remove();
            },

            // Error handling 
            error: function (error) {
                //console.log(`Error ${error}`);
                fireNotif('There was an Error Removing an Expense', 'error', 5000);
                console.log(error)
            }
        })
    }
    function ajaxCallToExpenseController(expense) {
        const obj = JSON.stringify(listOfExpenses);
        $.ajax({

            // Our sample url to make request 
            url:
                '/Expenses/Create',

            // Type of Request
            contentType: 'application/json; charset=utf-8',
            type: "Post",
            data: obj,

            // Function to call when to
            // request is ok 
            success: function (data) {
                window.localStorage.setItem("Success", "Successfully Added Expenses");
                let x = JSON.stringify(data);
                ClearExpenseListItems();
                const form = document.getElementById("expenseForm");
                // refresh the form, but keep current month
                form.submit();
            },

            // Error handling 
            error: function (error) {
                //console.log(`Error ${error}`);
                fireNotif('There was an Error Adding Expenses', 'error', 5000);
                console.log(error)
            }
        });
    }
    
   // The below functions, all pertain to adding fixed expenses, they all chain together to work seamlessely.


    //This takes an array of data - that is -> <fixed expenses> made into strings
    // a month, string
    // And a categoryId, associating to the users fixed-expense category id
    function ajaxCallToExpenseController_CreateFixedExpenses(data, month, categoryId){
        //list
        const listOfExpenses = []

        //create a date, for the first of the given month
        //method, dectionaryOfMonth is found in site.js, converts january to 0
        let year = new Date().getFullYear()
        let string = year+"-"+dictionaryOfMonth.get(month)+"-"+1
        let fixedExpenseDate = new Date(string).toISOString().split("T")[0]  

        //start looping and creating
        data.forEach( (el) => {
            //each element is an Expense class, so needs to map perfectly to data types
            let expense = {
                Year: +getOurWorkingYear(),
                Month: dictionaryOfMonth.get(month),
                Week: 1,
                CategoryId: +categoryId,
                Amount: el.amount  === "" ? 0 : el.amount,
                Date: fixedExpenseDate,
                Description: el.name,
                Currency: dictionaryOfCurrency.get(el.currency),
                isFixed: true,
                MyUserName: el.userid
            }

            //push to list of expenses
            listOfExpenses.push(expense);
        })

        //Finally, send a ajax db call with the above objects

        //take the list of expenses, and create them
        const obj = JSON.stringify(listOfExpenses);
        
        $.ajax({

            // Our sample url to make request 
            url:
                '/Expenses/CreateFixedExpenses',

            // Type of Request
            contentType: 'application/json; charset=utf-8',
            type: "Post",
            data: obj,

            // Function to call when to
            // request is ok 
            success: function (data) {
                let x = JSON.stringify(data);
                 //Hide original modal
                hideIndexModal()
                window.localStorage.setItem("Success", data);
                $form = $("<form action='Expenses'></form>").appendTo('body');;
                $form.submit();
            },

            // Error handling 
            error: function (error) {
                //console.log(`Error ${error}`);
                fireNotif('There was an Error Adding Expenses', 'error', 5000);
                console.log(error)
            }
        });
    }

    //Once we have the fixed-expense id, we can start collecting all the fixed expenses in order to make them expense objects
    function ajaxCallToFixedExpenseController_getFixedExpenses(categoryId){
        $.ajax({
            url: '/FixedExpenses/GetAll',
            contentType: 'application/x-www-form-urlencoded',
            type: "Get",
            success: function (data) {
                        //get current month
                        let month = @Html.Raw(Json.Serialize(ViewData["month"]));
                        //get all of our Fixed Expenses and pass them, to Create them
                        ajaxCallToExpenseController_CreateFixedExpenses(data,month.toLowerCase(),categoryId)
                    },

                    // Error handling 
                    error: function (error) {
                        fireNotif('There was an Error, pertaining to Fixed expenses', 'error', 5000);
                        console.log(error)
                    }
        });
    }

    // Check if user has a category named, fixed-expenses
    function ajaxCallToFixedExpenseController_checkIfCategoryExists(){
        $.ajax({
            url: '/Category/CheckIfCategoryExists',
            contentType: 'application/x-www-form-urlencoded',
            type: "Get",
            success: function (categoryId) {
                        //If successfully , id will not be 0
                        if(categoryId != 0 ){
                            //proceed to create, get id# from db
                            ajaxCallToFixedExpenseController_getFixedExpenses(categoryId)
                        } else {
                            //Hide original modal
                            hideIndexModal()
                            // initiate modal asking user if they wish to create such a category
                            toggle_index_expense_modal(ajaxCallToFixedExpenseController_CreateCategory,"Do you Wish to Create a category named -Fixed Expenses- in order to proceed?")
                        }
                    },

                    // Error handling 
                    error: function (error) {
                        fireNotif('There was an Error, pertaining to Fixed expenses', 'error', 5000);
                        console.log(error)
                    }
        });
    }

    //This is the function passed to the index modal.  Upon clicking yes, we will create a category named fixed-expenses
    function ajaxCallToFixedExpenseController_CreateCategory(){
        $.ajax({
            url: '/Category/CreateCategory',
            contentType: 'application/x-www-form-urlencoded',
            type: "Get",
            success: function (categoryId) {
                    //hide modal
                    hideIndexModal()
                        if(categoryId != 0){
                            //proceed to create, get id# from db
                            ajaxCallToFixedExpenseController_getFixedExpenses(categoryId)
                        } else {
                            console.log("id was bad ", categoryId);
                        }
                    },

                    // Error handling 
                    error: function (error) {
                        fireNotif('There was an Error, pertaining to Fixed expenses', 'error', 5000);
                        console.log(error)
                    }
        });     
    }
</script>